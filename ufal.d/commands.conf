object CheckCommand "check_links_status" {
    import "plugin-check-command"
    command = [ LindatPluginDir + "/check_resources.sh", "$hostname$", "$uri$", "$pattern$", "debug"]
}

object CheckCommand "check_is_auth" {
    import "plugin-check-command"
    if("$ssl$") {
        command = [ LindatPluginDir + "/check_http_is_auth",
             "ssl", "$hostname$", "$uri$", "$timeout$", "$valid_status$"]
    } else {
        command = [ LindatPluginDir + "/check_http_is_auth",
             "$hostname$", "$uri$", "$timeout$", "$valid_status$"]
    }
}

object CheckCommand "check_http_enhanced" {
    import "plugin-check-command"
    command = [ LindatPluginDir + "/check_http_enhanced"]
    arguments = {
        "-H" = "$hostname$"
        "-u" = "$uri$"
        "-t" = "$timeout$"
    }
}

object CheckCommand "check_handle" {
    import "plugin-check-command"
    timeout = 240
    // should rather rewrite the script to use getopt or something sensible
    if("$nocheck$"){
        command = [ LindatPluginDir + "/check_handle.py", "$input_file$", "$timeout$", "$log_file$", "nocheck", "$warn_val$", "$err_val$" ]
    } else{
        command = [ LindatPluginDir + "/check_handle.py", "$input_file$", "$timeout$", "$log_file$", "$warn_val$", "$err_val$" ]
    }
}

object CheckCommand "check_cesilko" {
    import "plugin-check-command"
    command = [ LindatPluginDir + "/cesilko/tests/test_cesilko.py", "nagios"]
}

//dns command from <itl> always expects an answer
object CheckCommand "check_dns" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_dns" ]
    arguments = {
        "-H" = "$dns_lookup$"
    }
}

//http command from <itl> always requires address
//this version does not have any defaults
object CheckCommand "check_http" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_http" ]
    arguments = {
        "-H" = "$http_vhost$"
        "-I" = "$http_address$"
        "-u" = "$http_uri$"
        "-p" = "$http_port$"
        "-S" = {
            set_if = "$http_ssl$"
        }
        "--sni" = {
            set_if = "$http_sni$"
        }
        "-C" = {
            value = "$http_certificate$"
            description = "Minimum number of days a certificate has to be valid. Port defaults to 443."
        }
        "-J" = {
            value = "$http_clientcert$"
            description = "Name of file contains the client certificate (PEM format)"
        }
        "-K" = {
            value = "$http_privatekey$"
            description = "Name of file contains the private key (PEM format)"
        }
        "-a" = {
            value = "$http_auth_pair$"
            description = "Username:password on sites with basic authentication"
        }
        "--no-body" = {
            set_if = "$http_ignore_body$"
        }
        "-w" = "$http_warn_time$"
        "-c" = "$http_critical_time$"
        "-e" = "$http_expect$"
        "-d" = {
            value = "$http_headerstring$"
            description = "String to expect in the response headers"
        }
        "-s" = {
            value = "$http_string$"
            description = "String to expect in the content"
        }
        "-P" = {
            value = "$http_post$"
            description = "URL encoded http POST data"
        }
        "-j" = {
            value = "$http_method$"
            description = "Set http method (for example: HEAD, OPTIONS, TRACE, PUT, DELETE)"
        }
        "-M" = {
            value = "$http_maxage$"
            description = "Warn if document is more than seconds old"
        }
        "-T" = {
            value = "$http_contenttype$"
            description = "Specify Content-Type header when POSTing"
        }
        "-l" = {
            set_if = "$http_linespan$"
            description = "Allow regex to span newline"
            order = 1
        }
        "-r" = {
            value = "$http_expect_body_regex$"
            description = "Search page for regex"
            order = 2
        }
        "-R" = {
            value = "$http_expect_body_eregi$"
            description = "Search page for case-insensitive regex"
            order = 2
        }
        "--invert-regex" = {
            set_if = "$http_invertregex$"
            description = "Return CRITICAL if found, OK if not"
        }
        "-b" = {
            value = "$http_proxy_auth_pair$"
            description = "Username:password on proxy-servers with basic authentication"
        }
        "-A" = {
            value = "$http_useragent$"
            description = "String to be sent in http header as User Agent"
        }
        "-k" = {
            value = "$http_header$"
            description = "Any other tags to be sent in http header"
        }
        "-E" = {
            set_if = "$http_extendedperfdata$"
            description = "Print additional perfdata"
        }
        "-f" = {
            value = "$http_onredirect$"
            description = "How to handle redirect pages"
        }
        "-m" = {
            value = "$http_pagesize$"
            description = "Minim page size required:Maximum page size required"
        }
        "-t" = {
            value = "$http_timeout$"
            description = "Seconds before connection times out"
        }
        "-4" = {
            set_if = "$http_ipv4$"
            description = "Use IPv4 only"
        }
        "-6" = {
            set_if = "$http_ipv6$"
            description = "Use IPv6 only"
        }
    }
}

object CheckCommand "check_ssl_cert" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_ssl_cert" ]
    arguments = {
        "-H" = {
            value = "$http_vhost$"
            description = "host server"
        }
        "-c" = {
            value = "$http_certificate$"
            description = "minimum number of days a certificate has to be valid to issue a critical status"
        }
        "-r" = {
            value = "/etc/ssl/certs"
            description = "root certificate or directory to be used for certficate validation"
        }
    }
}

/*
 TODOaai-idps.py not configured
from nagios conf...
define command{
    command_name    check_shibbie
    command_line    /usr/lib/nagios/plugins/aai-idps.py test nagios
}

define command{
    command_name    check_shibbie_tests
    command_line    /usr/lib/nagios/plugins/aai-idps.py test $ARG1$ nagios
}
*/
