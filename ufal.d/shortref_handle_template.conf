template Service "shortref-handle-service" {
    /*number of times that Icinga will retry the host check command if it returns any state other than an OK state.*/
    max_check_attempts = 3
    /*"time units" between regularly scheduled checks*/
    check_interval = 3h
    /*"time units" to wait before scheduling a re-check*/
    retry_interval = 3h
    event_command = "event_by_ssh_update_dead_flag"
    check_command = "negate"
    // ./negate -s -w CRITICAL ./check_http --onredirect=follow -H hdl.handle.net -u /11234/1-1714 -r "czeng" --invert-regex
    vars.negate_warning = "CRITICAL"
    vars.negate_substitute = true
    vars.negate_command = [PluginDir + "/check_http"]
    vars.negate_arguments = {
        "-f" = "follow"
        "-H" = "$http_vhost$"
        "-u" = "$http_uri$"
        "-p" = {
                value = "$http_port$"
                required = false
                set_if = "$http_port$"
        }
        "-a" = {
                value = "$http_auth$"
                required = false
                set_if = "$http_auth$"
        }
        "-S" = {
                set_if = "$http_ssl$"
        }
	"-N" = {set_if = true}
	"-e" = "100,101,200,201,202,203,204,205,206,300,301,302,303,304,305,306,307,401"
        #"-r" = "LINDAT_SHORTREF_GRAVEYARD"
        #"--invert-regex" = {set_if = true}
    }

    vars.no_notify = true
}

object EventCommand "event_by_ssh" {
    import "plugin-event-command"
    
    command = [PluginDir + "/check_by_ssh"]

    arguments = {
        "-H" = "$event_by_ssh_address$"
        "-p" = "$event_by_ssh_port$"
        "-C" = "$event_by_ssh_command$"
        "-l" = "$event_by_ssh_logname$"
        "-i" = "$event_by_ssh_identity$"
        "-q" = {
        set_if = "$event_by_ssh_quiet$"
        }
        "-w" = "$event_by_ssh_warn$"
        "-c" = "$event_by_ssh_crit$"
        "-t" = "$event_by_ssh_timeout$"
        "-v" = {
        set_if = "$event_by_ssh_verbose$"
        }
	"-o" = {
		value = "$event_by_ssh_other_opts$"
		skip_key = false
		repeat_key = true
	}
    }

    vars.event_by_ssh_address = "$address$"
    vars.event_by_ssh_quiet = false
}

object EventCommand "event_by_ssh_update_dead_flag"{
    import "event_by_ssh"
    //9hours = attempts * retry
    vars.event_by_ssh_command = "~/update_dead_flag.sh $service.state_type$ $service.state_id$ $handle$ 9hours"
    vars.event_by_ssh_address = XXX
    vars.event_by_ssh_logname = XXX
    //TODO username
    vars.event_by_ssh_identity = XXX
    vars.event_by_ssh_verbose = false
    //nagios user has no ~/.ssh/known_hosts so ssh fails without this
    vars.event_by_ssh_other_opts = ["UserKnownHostsFile=/dev/null", "StrictHostKeyChecking=no"]
}
